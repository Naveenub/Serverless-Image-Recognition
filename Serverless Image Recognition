# Serverless Image Recognition with AWS Lambda & Step Functions

## Project Overview
This project implements a serverless image recognition system using AWS Lambda, Step Functions, and Amazon Rekognition. The system continuously monitors an S3 bucket for new image uploads, analyzes them, and stores the results in another S3 bucket for further processing.

## Architecture & Implementation

### Data Flow
1. **Image Upload**: New images are uploaded to an **Amazon S3** source bucket.
2. **Event Trigger**: An **S3 Event Notification** triggers AWS Lambda.
3. **Step Function Execution**: Lambda invokes an **AWS Step Function** that orchestrates the recognition process.
4. **Image Recognition**: Amazon Rekognition analyzes the image.
5. **Comparison & Storage**: The results are compared, and metadata is stored in another **Amazon S3** destination bucket.
6. **Logging & Monitoring**: AWS CloudWatch monitors the entire workflow.

---

## Prerequisites
Ensure you have:
- An AWS account
- AWS CLI installed (optional for command-line setup)
- AWS Management Console access

---

## Step 1: Create Two S3 Buckets
1. Open the **AWS Console** â†’ Go to **Amazon S3**.
2. Create a **Source Bucket** (e.g., `image-upload-bucket`).
3. Create a **Destination Bucket** (e.g., `image-result-bucket`).

Alternatively, create buckets using AWS CLI:
```sh
aws s3 mb s3://image-upload-bucket
aws s3 mb s3://image-result-bucket
```

---

## Step 2: Create an IAM Role for Lambda & Step Functions
1. Open **AWS IAM** â†’ Go to **Roles**.
2. Click **Create Role** â†’ Choose **AWS Service** â†’ Select **Lambda**.
3. Attach the following policies:
   - `AmazonS3FullAccess`
   - `AWSLambdaBasicExecutionRole`
   - `AWSStepFunctionsFullAccess`
   - `AmazonRekognitionFullAccess`
4. Name the role `LambdaStepFunctionRole` and click **Create Role**.

---

## Step 3: Create the AWS Lambda Function
1. Open **AWS Lambda** â†’ Click **Create Function**.
2. Choose **Author from Scratch**.
3. Enter **Function Name**: `S3ImageTrigger`.
4. Select **Runtime**: `Python 3.x`.
5. Select **Use an existing role** â†’ Choose `LambdaStepFunctionRole`.
6. Click **Create Function**.

### Upload Lambda Code
Replace the function code with:
```python
import json
import boto3

sfn = boto3.client('stepfunctions')

def lambda_handler(event, context):
    for record in event['Records']:
        bucket = record['s3']['bucket']['name']
        image_key = record['s3']['object']['key']
        
        input_payload = {
            "bucket": bucket,
            "image_key": image_key
        }
        
        response = sfn.start_execution(
            stateMachineArn="arn:aws:states:<REGION>:<ACCOUNT_ID>:stateMachine:ImageRecognitionStateMachine",
            input=json.dumps(input_payload)
        )
        
        return {
            'statusCode': 200,
            'body': json.dumps('Step Function Started!')
        }
```

Click **Deploy**.

---

## Step 4: Configure S3 Event Notification
1. Go to **S3** â†’ Select `image-upload-bucket`.
2. Navigate to **Properties** â†’ **Event Notifications**.
3. Click **Create Event Notification**:
   - **Event Name**: `ImageUploadTrigger`
   - **Event Type**: `PUT`
   - **Destination**: Lambda Function â†’ Select `S3ImageTrigger`
4. Click **Save**.

---

## Step 5: Create an AWS Step Function
1. Open **AWS Step Functions** â†’ Click **Create State Machine**.
2. Select **Author from scratch**.
3. Enter **State Machine Name**: `ImageRecognitionStateMachine`.
4. Choose **Standard** type.
5. Select **IAM Role**: Choose `LambdaStepFunctionRole`.
6. Define the following JSON in the **Definition** section:

```json
{
  "StartAt": "ImageRecognition",
  "States": {
    "ImageRecognition": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:<REGION>:<ACCOUNT_ID>:function:ImageRecognitionFunction",
      "Next": "StoreResults"
    },
    "StoreResults": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:<REGION>:<ACCOUNT_ID>:function:StoreResultsFunction",
      "End": true
    }
  }
}
```

7. Click **Create State Machine**.

---

## Step 6: Create the Image Recognition Lambda Function
1. Open **AWS Lambda** â†’ Click **Create Function**.
2. Enter **Function Name**: `ImageRecognitionFunction`.
3. Select **Runtime**: `Python 3.x`.
4. Choose **Use an existing role** â†’ Select `LambdaStepFunctionRole`.
5. Click **Create Function**.

### Upload Function Code
```python
import boto3
import json

def lambda_handler(event, context):
    rekognition = boto3.client('rekognition')
    bucket = event['bucket']
    image_key = event['image_key']
    
    response = rekognition.detect_labels(
        Image={'S3Object': {'Bucket': bucket, 'Name': image_key}},
        MaxLabels=10,
        MinConfidence=90
    )
    
    labels = [label['Name'] for label in response['Labels']]
    
    return {
        'bucket': bucket,
        'image_key': image_key,
        'labels': labels
    }
```
Click **Deploy**.

---

## Step 7: Create the Storage Lambda Function
1. Open **AWS Lambda** â†’ Click **Create Function**.
2. Enter **Function Name**: `StoreResultsFunction`.
3. Select **Runtime**: `Python 3.x`.
4. Choose **Use an existing role** â†’ Select `LambdaStepFunctionRole`.
5. Click **Create Function**.

### Upload Function Code
```python
import boto3
import json

def lambda_handler(event, context):
    s3 = boto3.client('s3')
    bucket = "image-result-bucket"
    
    file_content = json.dumps(event, indent=2)
    file_key = f"results/{event['image_key']}.json"
    
    s3.put_object(Body=file_content, Bucket=bucket, Key=file_key)
    
    return {
        'statusCode': 200,
        'body': 'Results stored successfully!'
    }
```
Click **Deploy**.

---

## Step 8: Test the System
1. Upload an image to `image-upload-bucket`.
2. Monitor **Step Functions** execution.
3. Check `image-result-bucket` for recognition results.

Alternatively, use AWS CLI:
```sh
aws s3 cp test-image.jpg s3://image-upload-bucket/
```

---

## Conclusion
This setup ensures that every new image uploaded to S3 is automatically recognized, compared, and stored in another S3 bucket using a **Step Function workflow**. ðŸš€

generate the files with the necessary code and structure
